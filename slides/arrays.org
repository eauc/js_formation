** (First order) Methods

   Concat

   #+NAME: arrays-concat1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   var myArray = [1, 2, 3];
   myArray.concat([4, 5, 6]);
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-concat2
   #+BEGIN_SRC javascript :exports both
   [1, 2, 3].concat([]);
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-concat2

   #+ATTR_REVEAL: :frag roll-in
   Concat DOES NOT modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-concat3
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-concat3

   #+REVEAL: split

   Join

   #+NAME: arrays-join1
   #+BEGIN_SRC javascript :exports both
   [1, 2, 3].join(" cat ");
   #+END_SRC

   #+REVEAL: split

   Reverse

   #+NAME: arrays-reverse1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   var myArray = [1, 2, 3];
   myArray.reverse();
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   Reverse DOES modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-reverse2
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-reverse2

   #+REVEAL: split

   Pop

   #+NAME: arrays-pop1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   var myArray = [1, 2, 3]
   myArray.pop();
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   Pop DOES modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-pop2
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray;
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-pop2

   #+REVEAL: split

   Push

   #+NAME: arrays-push1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray.push(4);
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   Push DOES modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-push2
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray;
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-push2

   #+BEGIN_NOTES
   - yes, push returns the array's resulting length
   #+END_NOTES

   #+REVEAL: split
   Shift

   #+NAME: arrays-shift1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   var myArray = [1, 2, 3];
   myArray.shift();
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   Shift DOES modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-shift2
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray;
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-shift2

   #+REVEAL: split
   Unshift

   #+NAME: arrays-unshift1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray.unshift(4);
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   Unshift DOES modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-unshift2
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray;
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-unshift2

   #+REVEAL: split
   Slice

   #+NAME: arrays-slice1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   var myArray = [1, 2, 3, 4, 5];
   myArray.slice(1, 3);
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   Slice DOES NOT modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-slice2
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray;
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-slice2

   #+REVEAL: split
   Splice

   #+NAME: arrays-splice1
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   var myArray = [1, 2, 3, 4, 5];
   myArray.splice(1, 3);
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   Splice DOES modify the array

   #+ATTR_REVEAL: :frag roll-in
   #+NAME: arrays-splice2
   #+BEGIN_SRC javascript :exports both :session arrays-methods
   myArray;
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+RESULTS: arrays-splice2

   #+REVEAL: split
   ~¯\_(ツ)_/¯~

   Nobody remembers which methods modify the array

** High order methods

*** Old-school loops

    #+NAME: arrays-loops
    #+BEGIN_SRC javascript :exports both
    var myArray = [1, 2, 3];

    var result = 0;
    for(var i = 0 ; i < myArray.length ; i++) {
      result += myArray[i];
    }

    result;
    #+END_SRC

    #+REVEAL: split

    Slightly better

    #+NAME: arrays-loops2
    #+BEGIN_SRC javascript :exports both
    var myArray = [1, 2, 3];

    var result = 0;
    for(var i in myArray) {
      result += myArray[i];
    }

    result;
    #+END_SRC

    #+REVEAL: split

    Do NOT, EVER write code like that

    #+ATTR_REVEAL: :frag roll-in
    Cool kids use Higher-order functions

*** Reduce

    The mother of all array algorithms

    #+ATTR_REVEAL: :frag roll-in
    Example
    #+NAME: arrays-reduce-schema
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-reduce.png :cmdline -E :exports results
          Array
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+
            |
            v
       +----+----+
       | 1+2+3+4 |
       +---------+
         Result
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: arrays-reduce-schema

    #+REVEAL: split

    Init

    #+NAME: arrays-reduce-schema0
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-reduce0.png :cmdline -E :exports results
          Array
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+


    +---+
    | 0 |
    +---+
    Initial Value
    #+END_SRC

    #+REVEAL: split

    Step 1

    #+NAME: arrays-reduce-schema1
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-reduce1.png :cmdline -E :exports results
    Item
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+
      |
      |
      |
      v
    +-----+
    | 0+1 |
    +-----+
    Result
    #+END_SRC

    #+REVEAL: split

    Step 2

    #+NAME: arrays-reduce-schema2
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-reduce2.png :cmdline -E :exports results
        Item
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+
          |
        +-+
        |
        v
    +-------+
    | 0+1+2 |
    +-------+
     Result
    #+END_SRC

    #+REVEAL: split

    Step 3

    #+NAME: arrays-reduce-schema3
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-reduce3.png :cmdline -E :exports results
            Item
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+
              |
         +----+
         |
         v
    +---------+
    | 0+1+2+3 |
    +---------+
       Result
    #+END_SRC

    #+REVEAL: split

    Step 4

    #+NAME: arrays-reduce-schema4
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-reduce4.png :cmdline -E :exports results
                Item
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+
                  |
          +-------+
          |
          v
    +-----------+
    | 0+1+2+3+4 |
    +-----------+
       Result
    #+END_SRC

    #+REVEAL: split

    Now some code

    #+NAME: arrays-reduce
    #+BEGIN_SRC javascript :exports both
    [1, 2, 3, 4].reduce((result, item) => {
      // it's important to always return the new result
      return result + item;
    }, 0);
    #+END_SRC

    #+REVEAL: split

    With =reduce= you can choose:

    #+ATTR_REVEAL: :frag (roll-in)
    - the type of result/initial value (eg. =Number,Array=)
    - the transformation operator (eg. =noop,inc=)
    - the aggregation operator (eg. =+,push=)

    #+REVEAL: split

    - type of result: =Array=
    - transformation: =increment=
    - aggregation: =push=

    #+NAME: arrays-reduce2
    #+BEGIN_SRC javascript :exports both
    [1, 2, 3, 4].reduce((result, item) => {
      result.push(item + 1)
      return result;
    }, []);
    #+END_SRC

    #+REVEAL: split

    - type of result: =Array=
    - transformation: =if(isPair?)=
    - aggregation: =push=

    #+NAME: arrays-reduce3
    #+BEGIN_SRC javascript :exports both
    [1, 2, 3, 4].reduce((result, item) => {
      if (item % 2 == 0) {
        result.push(item);
      }
      return result;
    }, []);
    #+END_SRC

    #+REVEAL: split
    You can implement any loop with =reduce=

*** Map

    Remember:
    - type of result: =Array=
    - transformation: =increment=
    - aggregation: =push=

    #+NAME: arrays-map0
    #+BEGIN_SRC javascript :exports both
    [1, 2, 3, 4].reduce((result, item) => {
      result.push(item + 1)
      return result;
    }, []);
    #+END_SRC

    #+REVEAL: split

    #+NAME: arrays-map-schema
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-map.png :cmdline -E :exports results
        Item
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+
          |
          |inc(2) 
          |
          v
     +--------+--------+
     | inc(1) | inc(2) |
     +--------+--------+
         Result
    #+END_SRC

    #+REVEAL: split

    =Map=:
    - type of result: =Array=
    - transformation: <yourFunction>
    - operator: =push=

    #+NAME: arrays-map1
    #+BEGIN_SRC javascript :exports both
    [1, 2, 3, 4].map((item) => {
      return item + 1;
    });
    #+END_SRC

    #+BEGIN_NOTES
    - map is a specialised reduce
    #+END_NOTES

*** Filter

    Remember:
    - type of result: =Array=
    - transformation: =if(isPair?)=
    - aggregation: =push=

    #+NAME: arrays-map0
    #+BEGIN_SRC javascript :exports both
    [1, 2, 3, 4].reduce((result, item) => {
      if(item %2 === 0) {
        result.push(item + 1)
      }
      return result;
    }, []);
    #+END_SRC

    #+REVEAL: split

    #+NAME: arrays-filter-schema
    #+BEGIN_SRC ditaa :file ./assets/build/arrays-filter.png :cmdline -E :exports results
        Item
    +---+---+---+---+
    | 1 | 2 | 3 | 4 |
    +-+-+-+-+-+-+-+-+
          |
          |if(isPair?(2))
          |
          v
     +--------+
     |   2    |
     +--------+
       Result
    #+END_SRC

    #+REVEAL: split

    =Filter=:
    - type of result: =Array=
    - transformation: =if(<yourPredicate>)=
    - operator: =push=

    #+NAME: arrays-map1
    #+BEGIN_SRC javascript :exports both
    [1, 2, 3, 4].filter((item) => {
      return (item % 2) === 0;
    });
    #+END_SRC

    #+BEGIN_NOTES
    - filter is a specialised reduce
    #+END_NOTES

    #+REVEAL: split

    When to use:
    #+ATTR_REVEAL: :frag (roll-in)
    - transform each value in a list → map
    - keep/remove values from a list → filter/reject
    - aggregate values from a list → reduce

    #+REVEAL: split

    A lot of other algoritms exist
    - head, nth, tail
    - take, drop
    - some, every
    - flatten, mapcat
    - intersperce, partition

    #+ATTR_REVEAL: :frag roll-in
    Lodash has a lot of arrays functions

** Destructuring

   Some code in ES5

   #+NAME: arrays-destructuring-es5
   #+BEGIN_SRC javascript :exports both
   var myArray = [1, 2, 3, 4, 5];

   var a = myArray[0];
   var b = myArray[1];
   var c = myArray[2];
   var d = myArray.slice(3);

   `a: ${a}, b: ${b}, c: ${c}, d: ${JSON.stringify(d)}`
   #+END_SRC

   #+REVEAL: split

   The same in ES6

   #+NAME: arrays-destructuring-es6
   #+BEGIN_SRC javascript :exports both
   var myArray = [1, 2, 3, 4, 5];

   var [a, b, c, ...d] = myArray;

   `a: ${a}, b: ${b}, c: ${c}, d: ${JSON.stringify(d)}`
   #+END_SRC

   #+REVEAL: split

   Some code in ES5

   #+NAME: arrays-restructuring-es5
   #+BEGIN_SRC javascript :exports both
   var myNumber = 0;
   var myArray = [1, 2, 3];
   var otherArray = [4, 5, 6];
   
   // need to remember who modifies and who copies
   var result = myArray.slice();
   result.push(myNumber);
   result = result.concat(otherArray);

   result;
   #+END_SRC

   #+REVEAL: split

   The same in ES6

   #+NAME: arrays-restructuring-es6
   #+BEGIN_SRC javascript :exports both
   var myNumber = 0;
   var myArray = [1, 2, 3];
   var otherArray = [4, 5, 6];

   var result = [...myArray, myNumber, ...otherArray];

   result;
   #+END_SRC

   #+REVEAL: split

   Always use destructuring & spread, instead of push/pop/concat

   #+ATTR_REVEAL: :frag roll-in
   No need to remember what modifies & what copies

   #+ATTR_REVEAL: :frag roll-in
   Always creates copies

   #+ATTR_REVEAL: :frag roll-in
   Improved readability (once you know how it works)
