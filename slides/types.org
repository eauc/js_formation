** Finding types of values
   Aka "typeof is useless"

*** Nil values
    #+BEGIN_SRC js
    undefined
    null
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    What's the difference ?

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: typeof-undefined
    #+BEGIN_SRC javascript :exports both :session basic-types
    typeof(undefined);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: typeof-undefined

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: typeof-null
    #+BEGIN_SRC javascript :exports both :session basic-types
    typeof(null);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: typeof-null
    
    #+ATTR_REVEAL: :frag roll-in
    To test if a value exists

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: is-nil
    #+BEGIN_SRC js
    function isNil(value) {
      return value === undefined ||
        value === null;
    }
    #+END_SRC

    #+BEGIN_NOTES
    - typeof operator gives type of things
    #+END_NOTES

*** Booleans

    #+NAME: typeof-bool
    #+BEGIN_SRC javascript :exports both :session basic-types
    typeof(true);
    #+END_SRC

*** Numbers

    #+NAME: typeof-number
    #+BEGIN_SRC javascript :exports both :session basic-types
    typeof(5);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    NaN

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: typeof-nan
    #+BEGIN_SRC javascript :exports both :session basic-types
    typeof(NaN);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: typeof-nan

    #+BEGIN_NOTES
    - typeof NotANumber is 'number', of course :D
    #+END_NOTES

    #+REVEAL: split

    How to test for NaN, the Cthulhu way

    #+NAME: is-nan-cthulhu
    #+BEGIN_SRC javascript :exports both :session basic-types
    function isNaNByCthulhu(value) {
      return value !== value;
    }

    isNaNByCthulhu(NaN);
    #+END_SRC

    #+BEGIN_NOTES
    - NaN is the only thing not equal to itself in JS
    - bonus points for not creating an isNan function in your code !
      just put this test inline for extra fun
    #+END_NOTES

    #+REVEAL: split

    How to test for NaN, the human way
 
    #+NAME: is-nan
    #+BEGIN_SRC javascript :exports both :session basic-types
    isNaN(NaN);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    By the way

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: is-nan2
    #+BEGIN_SRC javascript :exports both :session basic-types
    isNaN("45");
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: is-nan2

*** Strings

    #+NAME: typeof-string
    #+BEGIN_SRC javascript :exports both :session basic-types
    typeof("Hello, world");
    #+END_SRC

*** Functions

    #+NAME: typeof-function
    #+BEGIN_SRC javascript :exports both :session basic-types
    typeof(function(){});
    #+END_SRC

*** Arrays

    Of course

    #+NAME: typeof-array
    #+BEGIN_SRC javascript :exports both :session array-types
    typeof([1,2,3]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    Since ES5

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: is-array
    #+BEGIN_SRC javascript :exports both :session array-types
    Array.isArray([1,2,3]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: is-array

    #+BEGIN_NOTES
    - typeof is useless for arrays, of course
    - since ES5 at least we have a type test on Array.isArray
    #+END_NOTES

*** Objects

    Lots of stuff are "objects"

    #+NAME: typeof-object
    #+BEGIN_SRC javascript :exports both :session object-types
    typeof({});
    #+END_SRC
    #+NAME: typeof-object2
    #+BEGIN_SRC javascript :exports both :session object-types
    typeof(null);
    #+END_SRC
    #+NAME: typeof-object3
    #+BEGIN_SRC javascript :exports both :session object-types
    typeof([]);
    #+END_SRC

    #+REVEAL: split

    Casting to string can help ?

    #+NAME: typeof-obj-cast-string
    #+BEGIN_SRC javascript :exports both :session object-types
    "Object: '" + String({a: 1}) + "'\n" +
    "Null:   '" + String(null) + "'\n" +
    "Array:  '" + String([1, 2]) + "'";
    #+END_SRC

    #+RESULTS: typeof-obj-cast-string
    : Object: ’[object Object]’
    : Null:   ’null’
    : Array:  ’1,2’

    #+ATTR_REVEAL: :frag roll-in
    Until someone overrides =toString()=

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: typeof-obj-cast-string-oops
    #+BEGIN_SRC javascript :exports both :session object-types
    var myObject = {
      toString() {
        return "Just kiddin";
      }
    };

    String(myObject);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: typeof-obj-cast-string-oops
    
    #+BEGIN_NOTES
    - typeof is useless for objects, of course
    - only way to test for plain object is to cast to string, cool
    - will not work if someone changed .toString() method on object :)
    #+END_NOTES

    #+REVEAL: split

    Only one sure way

    #+NAME: is-plain-objet
    #+BEGIN_SRC javascript :exports code :session toto
    function isPlainObject(value) {
      return typeof(value) === "object" &&
        value !== null &&
        !Array.isArray(value);
    }

    isPlainObject({});
    #+END_SRC

    #+NAME: is-plain-object-calls2
    #+BEGIN_SRC javascript :exports both :session toto
    isPlainObject(null);
    #+END_SRC
    #+NAME: is-plain-object-calls3
    #+BEGIN_SRC javascript :exports both :session toto
    isPlainObject([]);
    #+END_SRC

    #+BEGIN_NOTES
    - only way is to test if object && not array && not null
    #+END_NOTES

    #+REVEAL: split

    Conclusion: never use typeof

    #+REVEAL: split

    Lodash has many type helpers:

    - isArray
    - isDate
    - isInteger
    - isNaN
    - isNil
    - isPlainObject
    - isRegex

** Casts

   [[file:assets/implicit_casts.jpg]]

   #+BEGIN_NOTES
   - to the right, the proud JS developer.
   - to the left, the horrified reader.
   #+END_NOTES

*** Type Casts

    Casts in JS are "fun"

    #+NAME: casts-fun
    #+BEGIN_SRC javascript :exports both :session casts-types
    "5" + 4 - 4;
    #+END_SRC
    #+NAME: casts-fun2
    #+BEGIN_SRC javascript :exports both :session casts-types
      +"5" + 4 - 4;
    #+END_SRC
    #+NAME: casts-fun3
    #+BEGIN_SRC javascript :exports both :session casts-types
      +"45hello";
    #+END_SRC

    #+REVEAL: split

    #+NAME: casts-fun-shifts
    #+BEGIN_SRC javascript :exports both :session casts-types
    "3.14156" >> 0;
    #+END_SRC
    #+NAME: casts-fun-shifts2
    #+BEGIN_SRC javascript :exports both :session casts-types
    "45hello" >> 0;
    #+END_SRC

    #+REVEAL: split

    #+NAME: casts-fun-objects
    #+BEGIN_SRC javascript :exports both :session casts-types
    []+{};
    #+END_SRC
    #+NAME: casts-fun-objects2
    #+BEGIN_SRC javascript :exports both :session casts-types
    {}+[];
    #+END_SRC
    #+NAME: casts-fun-objects3
    #+BEGIN_SRC javascript :exports both :session casts-types
    {}+{};
    #+END_SRC
 
    #+REVEAL: split

    JS implicit casts are totally random

    #+ATTR_REVEAL: :frag roll-in
    Never rely on implicit casts

    #+BEGIN_NOTES
    - unfortunately a lot of JS devs try for clever instead of explicit.
    - you will come across code that works due to implicit/clever casts.
    #+END_NOTES

*** To Number

    =Number=

    #+NAME: casts-number
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number(3.14);
    #+END_SRC
    #+NAME: casts-number2
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number("3.14");
    #+END_SRC
    #+NAME: casts-number3
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number("3.14 hello");
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    Okay...

    #+REVEAL: split

    #+NAME: casts-number4
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number("hello");
    #+END_SRC
    #+NAME: casts-number5
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number("");
    #+END_SRC
    #+NAME: casts-number6
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number(true);
    #+END_SRC
    #+NAME: casts-number7
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number({});
    #+END_SRC
    #+NAME: casts-number8
    #+BEGIN_SRC javascript :exports both :session casts-types
    Number([]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    ... nope

    #+BEGIN_NOTES
    - Number cast is shit.
    #+END_NOTES

    #+REVEAL: split

    =parseFloat=

    #+NAME: casts-parsefloat
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseFloat("3.14");
    #+END_SRC
    #+NAME: casts-parsefloat2
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseFloat("3.14 hello");
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    M'kay...

    #+REVEAL: split

    #+NAME: casts-parsefloat3
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseFloat("hello");
    #+END_SRC
    #+NAME: casts-parsefloat4
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseFloat("");
    #+END_SRC
    #+NAME: casts-parsefloat5
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseFloat(true);
    #+END_SRC
    #+NAME: casts-parsefloat6
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseFloat({});
    #+END_SRC
    #+NAME: casts-parsefloat7
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseFloat([]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    ... clear

    #+BEGIN_NOTES
    - parseFloat is more sensible.
    - only problem is parseFloat accepts random chars as long as it starts with a number.
    #+END_NOTES

    #+REVEAL: split

    =parseInt=

    #+NAME: casts-parseint
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseInt("3");
    #+END_SRC
    #+NAME: casts-parseint2
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseInt("3.14");
    #+END_SRC
    #+NAME: casts-parseint3
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseInt("3 hello");
    #+END_SRC

    #+REVEAL: split

    #+NAME: casts-parseint4
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseInt("hello");
    #+END_SRC
    #+NAME: casts-parseint5
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseInt("");
    #+END_SRC
    #+NAME: casts-parseint6
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseInt("0x3F", 16);
    #+END_SRC
    #+NAME: casts-parseint7
    #+BEGIN_SRC javascript :exports both :session casts-types
    parseInt("321", 2);
    #+END_SRC

    #+BEGIN_NOTES
    - parseInt works the same but can take a base.
    #+END_NOTES

*** To Strings

    =String=

    #+NAME: casts-string
    #+BEGIN_SRC javascript :exports both :session casts-types
    String("hello");
    #+END_SRC
    #+NAME: casts-string2
    #+BEGIN_SRC javascript :exports both :session casts-types
    String(3.14);
    #+END_SRC
    #+NAME: casts-string3
    #+BEGIN_SRC javascript :exports both :session casts-types
    String(NaN);
    #+END_SRC
    #+NAME: casts-string4
    #+BEGIN_SRC javascript :exports both :session casts-types
    String(true);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    Okay...
        
    #+REVEAL: split

    #+NAME: casts-string7
    #+BEGIN_SRC javascript :exports both :session casts-types
    String({a: 1});
    #+END_SRC
    #+NAME: casts-string8
    #+BEGIN_SRC javascript :exports both :session casts-types
    String([1, 2]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    ... nope

    #+BEGIN_NOTES
    - basic string-cast is shit for arrays.
    #+END_NOTES

    #+REVEAL: split

    =JSON.stringify=

    #+NAME: casts-stringify
    #+BEGIN_SRC javascript :exports both :session casts-types
    JSON.stringify("hello");
    #+END_SRC
    #+NAME: casts-stringify2
    #+BEGIN_SRC javascript :exports both :session casts-types
    JSON.stringify(3.14);
    #+END_SRC
    #+NAME: casts-stringify3
    #+BEGIN_SRC javascript :exports both :session casts-types
    JSON.stringify(NaN);
    #+END_SRC
    #+NAME: casts-stringify4
    #+BEGIN_SRC javascript :exports both :session casts-types
    JSON.stringify(true);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    Okay...

    #+REVEAL: split

    #+NAME: casts-stringify5
    #+BEGIN_SRC javascript :exports both :session casts-types
    JSON.stringify({a: 1});
    #+END_SRC
    #+NAME: casts-stringify6
    #+BEGIN_SRC javascript :exports both :session casts-types
    JSON.stringify([1, 2]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    ... clear

    #+BEGIN_NOTES
    - JSON.stringify is the best way to print a JS value and know its type.
    - plus it parseable with JSON.parse.
    - but we loose NaN :-\
    #+END_NOTES

    #+REVEAL: split

    For numbers

    #+NAME: casts-tofixed
    #+BEGIN_SRC javascript :exports both :session casts-types
    var number = 9.656;

    number.toFixed(0);
    #+END_SRC
    #+NAME: casts-tofixed2
    #+BEGIN_SRC javascript :exports both :session casts-types
    number.toFixed(2);
    #+END_SRC
    #+NAME: casts-tofixed3
    #+BEGIN_SRC javascript :exports both :session casts-types
    number.toFixed(4);
    #+END_SRC

    #+REVEAL: split

    #+NAME: casts-toprecision
    #+BEGIN_SRC javascript :exports both :session casts-types
    var number = 9.656;

    number.toPrecision();
    #+END_SRC
    #+NAME: casts-toprecision2
    #+BEGIN_SRC javascript :exports both :session casts-types
    number.toPrecision(2);
    #+END_SRC
    #+NAME: casts-toprecision3
    #+BEGIN_SRC javascript :exports both :session casts-types
    number.toPrecision(4);
    #+END_SRC

    #+BEGIN_NOTES
    - Number has useful function to convert to fixed strings.
    - this work only on a var (can't call a method on a number literal).
    #+END_NOTES

    #+REVEAL: split

    ES6 templates: basic cast to String

    #+NAME: casts-string-template
    #+BEGIN_SRC javascript :exports both :session casts-types
    `string: ${"hello"}`;
    #+END_SRC
    #+NAME: casts-string-template2
    #+BEGIN_SRC javascript :exports both :session casts-types
    `number: ${3.14}`;
    #+END_SRC
    #+NAME: casts-string-template3
    #+BEGIN_SRC javascript :exports both :session casts-types
    `array: ${[1,2,3]}`;
    #+END_SRC
    #+NAME: casts-string-template4
    #+BEGIN_SRC javascript :exports both :session casts-types
    `object: ${{a: 1, b: 2}}`;
    #+END_SRC
    #+NAME: casts-string-template5
    #+BEGIN_SRC javascript :exports both :session casts-types
    `bool: ${true}`;
    #+END_SRC

    #+BEGIN_NOTES
    - ES6 templates use basic string-cast.
    - use JSON.stringify in templates too.
    - (always use string templates when building strings)
    #+END_NOTES

*** To Booleans

    =Boolean=

    #+NAME: casts-bool
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean(true);
    #+END_SRC
    #+NAME: casts-bool2
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean(false);
    #+END_SRC
    #+NAME: casts-bool3
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean(null);
    #+END_SRC
    #+NAME: casts-bool4
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean(undefined);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    Okay...

    #+REVEAL: split

    #+NAME: casts-bool-string
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean("hello");
    #+END_SRC
    #+NAME: casts-bool-string2
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean("");
    #+END_SRC

    #+REVEAL: split

    #+NAME: casts-bool-number
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean(3.14);
    #+END_SRC
    #+NAME: casts-bool-number2
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean(0);
    #+END_SRC
    #+NAME: casts-bool-number3
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean(NaN);
    #+END_SRC

    #+REVEAL: split

    #+NAME: casts-bool-object
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean({});
    #+END_SRC
    #+NAME: casts-bool-object2
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean([]);
    #+END_SRC
    #+NAME: casts-bool-object3
    #+BEGIN_SRC javascript :exports both :session casts-types
    Boolean([1, 2]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    ... whatever

    #+BEGIN_NOTES
    - casts to Booleans are shit too. Compare "" with {} and []
    #+END_NOTES

    #+REVEAL: split

    Don't try to be clever, be explicit

    #+ATTR_REVEAL: :frag roll-in
    Prefer explicit tests: =_.isNil()=, =_.isEmpty()=, etc

    #+ATTR_REVEAL: :frag roll-in
    No perfect way to cast values in JS :-( 

    #+ATTR_REVEAL: :frag roll-in
    Use JSON.stringify/parse() to convert values to/from string
