** Finding types of values
   Aka. "typeof is useless".

*** Nil values
    #+BEGIN_SRC js
    undefined
    null
    #+END_SRC

    What's the difference ?
    #+NAME: typeof-nil
    #+BEGIN_SRC js :exports results :results output :session basic-types
    typeof(undefined);
    typeof(null);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: typeof-nil

    
    #+ATTR_REVEAL: :frag roll-in
    To test if a value exists:

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: is-nil
    #+BEGIN_SRC js
    function isNil(value) {
      return value === undefined ||
        value === null;
    }
    #+END_SRC

    #+BEGIN_NOTES
    - typeof operator gives type of things
    #+END_NOTES

*** Booleans

    #+NAME: typeof-bool
    #+BEGIN_SRC js :exports results :results output :session basic-types
    typeof(true);
    #+END_SRC

    #+RESULTS: typeof-bool

*** Numbers

    #+NAME: typeof-number
    #+BEGIN_SRC js :exports results :results output :session basic-types
    typeof(5);
    #+END_SRC

    #+RESULTS: typeof-number

    #+ATTR_REVEAL: :frag roll-in
    - NaN
    #+NAME: typeof-nan
    #+BEGIN_SRC js :exports results :results output :session basic-types
    typeof(NaN);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: typeof-nan

    #+ATTR_REVEAL: :frag roll-in
    To test for NaN:

    #+ATTR_REVEAL: :frag roll-in
    #+NAME: is-nan
    #+BEGIN_SRC js :exports code :results output :session basic-types
    function isNaN(value) {
      return value !== value;
    }
    #+END_SRC

    #+NAME: is-nan-calls
    #+BEGIN_SRC js :exports results :results output :session basic-types
    isNaN(NaN);
    isNaN(5);
    isNaN(null);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: is-nan-calls

    #+BEGIN_NOTES
    - typeof NotANumber is 'number', of course :D
    - NaN is the only thing not equal to itself in JS
    #+END_NOTES

*** Strings

    #+NAME: typeof-string
    #+BEGIN_SRC js :exports results :results output :session basic-types
    typeof("Hello, world");
    #+END_SRC

*** Functions

    #+NAME: typeof-function
    #+BEGIN_SRC js :exports results :results output :session function-types
    typeof(function(){});
    #+END_SRC

*** Arrays

    Of course:
    #+NAME: typeof-array
    #+BEGIN_SRC js :exports results :results output :session array-types
    typeof([1,2,3]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    Since ES5:
    #+NAME: is-array
    #+BEGIN_SRC js :exports results :results output :session array-types
    Array.isArray([1,2,3]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: is-array

    #+BEGIN_NOTES
    - typeof is useless for arrays, of course
    - since ES5 at least we have a type test on Array.isArray
    #+END_NOTES

*** Objects

    Lots of stuff are "objects":
    #+NAME: typeof-object
    #+BEGIN_SRC js :exports results :results output :session object-types
    typeof({});
    typeof(null);
    typeof([]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    Casting to string can help:

    #+NAME: typeof-obj-cast-string
    #+BEGIN_SRC js :exports results :results output :session object-types
    String({});
    String(null);
    String([]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: typeof-obj-cast-string

    #+BEGIN_NOTES
    - typeof is useless for objects, of course
    - only way to test for plain object is to cast to string, cool
    - will not work if someone changed .toString() method on object :)
    #+END_NOTES

    #+REVEAL: split

    Only one sure way:
    #+NAME: is-plain-objet
    #+BEGIN_SRC js :exports code :results output :session object-types
    function isPlainObject(value) {
      return typeof(value) === "object" &&
        value !== null &&
        !Array.isArray(value);
    }
    #+END_SRC

    #+NAME: is-plain-object-calls
    #+BEGIN_SRC js :exports results :results output :session object-types
    isPlainObject({});
    isPlainObject(null);
    isPlainObject([]);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: is-plain-object-calls

    #+BEGIN_NOTES
    - only way is to test if object && not array && not null
    #+END_NOTES

    #+REVEAL: split

    Conclusion: never use typeof.

** Casts

   [[file:assets/implicit_casts.jpg]]

*** Type Casts

    Casts in JS are "fun":
    #+NAME: casts-fun
    #+BEGIN_SRC js :exports results :results output :session casts-types
    "5" + 4 - 4;
      +"5" + 4 - 4;
      +"45hello";
    #+END_SRC

    #+NAME: casts-fun-shifts
    #+BEGIN_SRC js :exports results :results output :session casts-types
    "3.14156" >> 0;
    "45hello" >> 0;
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: casts-fun-shifts

    #+NAME: casts-fun-objects
    #+BEGIN_SRC js :exports results :results output :session casts-types
    []+{};
    {}+[];
    {}+{};
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: casts-fun-objects

    #+BEGIN_NOTES
    - JS casts are unpredicable.
    - unfortunately a lot of JS devs try for clever instead of explicit.
    - you will come across code that works due to implicit/clever casts.
    #+END_NOTES

*** To Number

    =Number=
    #+NAME: casts-number
    #+BEGIN_SRC js :exports results :results output :session casts-types
    Number(3.14);
    Number("3.14");
    Number("3.14 hello");
    Number("hello");
    Number("");
    Number(true);
    Number({});
    Number([]);
    Number(null);
    Number(undefined);
    #+END_SRC

    #+BEGIN_NOTES
    - Number cast is shit.
    #+END_NOTES

    #+REVEAL: split

    =parseFloat=
    #+NAME: casts-parsefloat
    #+BEGIN_SRC js :exports results :results output :session casts-types
    parseFloat("3.14");
    parseFloat("3.14 hello");
    parseFloat("hello");
    parseFloat("");
    parseFloat(true);
    parseFloat({});
    parseFloat([]);
    parseFloat(null);
    parseFloat(undefined);
    #+END_SRC

    #+BEGIN_NOTES
    - parseFloat is more sensible.
    - only problem is parseFloat accepts random chars as long as it starts with a number.
    #+END_NOTES

    #+REVEAL: split

    =parseInt=
    #+NAME: casts-parseint
    #+BEGIN_SRC js :exports results :results output :session casts-types
    parseInt("3");
    parseInt("3.14");
    parseInt("3 hello");
    parseInt("hello");
    parseInt("");
    parseInt("0x3F", 16);
    parseInt("321", 2);
    #+END_SRC

    #+BEGIN_NOTES
    - parseInt works the same but can take a base.
    #+END_NOTES

*** To Strings

    =String=
    #+NAME: casts-string
    #+BEGIN_SRC js :exports results :results output :session casts-types
    String("hello");
    String(3.14);
    String(NaN);
    String(true);
    String({a: 1});
    String([1, 2]);
    String(null);
    String(undefined);
    #+END_SRC

    #+BEGIN_NOTES
    - basic string-cast is shit for arrays.
    #+END_NOTES

    #+REVEAL: split

    =JSON.stringify=
    #+NAME: casts-stringify
    #+BEGIN_SRC js :exports results :results output :session casts-types
    JSON.stringify("hello");
    JSON.stringify(3.14);
    JSON.stringify(NaN);
    JSON.stringify(true);
    JSON.stringify({a: 1});
    JSON.stringify([1, 2]);
    JSON.stringify(null);
    JSON.stringify(undefined);
    #+END_SRC

    #+BEGIN_NOTES
    - JSON.stringify is the best way to print a JS value and know its type.
    - plus it parseable with JSON.parse.
    - but we loose NaN :-\
    #+END_NOTES

    #+REVEAL: split

    For numbers:
    #+BEGIN_SRC js :exports code :results output :session casts-types
    var number = 9.656;
    #+END_SRC

    #+NAME: casts-tofixed
    #+BEGIN_SRC js :exports results :results output :session casts-types
    number.toFixed(0);
    number.toFixed(2);
    number.toFixed(4);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: casts-tofixed

    #+NAME: casts-toexpo
    #+BEGIN_SRC js :exports results :results output :session casts-types
    number.toExponential(0);
    number.toExponential(2);
    number.toExponential(4);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: casts-toexpo

    #+NAME: casts-toprecision
    #+BEGIN_SRC js :exports results :results output :session casts-types
    Number.ToPrecision();
    number.toPrecision(2);
    number.toPrecision(4);
    #+END_SRC

    #+ATTR_REVEAL: :frag roll-in
    #+RESULTS: casts-toprecision

    #+BEGIN_NOTES
    - Number has useful function to convert to fixed strings.
    - this work only on a var (can't call a method on a number literal).
    #+END_NOTES

    #+REVEAL: split

    ES6 templates: basic cast to String
    #+NAME: casts-string-template
    #+BEGIN_SRC js :exports results :results output :session casts-types
    `string: ${3.14}`;
    `number: ${3.14}`;
    `array: ${[1,2,3]}`;
    `object: ${{a: 1, b: 2}}`;
    `bool: ${3.14}`;
    `null: ${3.14}`;
    `undefined: ${3.14}`;
    #+END_SRC

    #+BEGIN_NOTES
    - ES6 templates use basic string-cast.
    - use JSON.stringify in templates too.
    #+END_NOTES

*** To Booleans

    =Boolean=
    #+NAME: casts-bool
    #+BEGIN_SRC js :exports results :results output :session casts-types
    Boolean(true);
    Boolean("hello");
    Boolean("");
    Boolean(3.14);
    Boolean(0);
    Boolean(NaN);
    Boolean({});
    Boolean([1, 2]);
    Boolean([]);
    Boolean(null);
    Boolean(undefined);
    #+END_SRC

    #+BEGIN_NOTES
    - casts to Booleans are shit too. Compare "" with {} and []
    #+END_NOTES

    #+REVEAL: split

    Don't try to be clever, be explicit.

    #+ATTR_REVEAL: :frag roll-in
    Prefer explicit tests: =isNil()=, =isEmpty()=, etc.

    #+ATTR_REVEAL: :frag roll-in
    No perfect way to cast a value to Number in JS :-( =parseFloat()= is the most sensible.

    #+ATTR_REVEAL: :frag roll-in
    Use JSON.stringify/parse() to convert values to/from string.
