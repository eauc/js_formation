** Properties
    Properties:
    #+BEGIN_SRC js :exports code :results output :session object-types
    var myObject = {
      a: 0,
      1: "1",
      null: 2,
    };
    #+END_SRC

    List entries:
    #+BEGIN_SRC js :exports results :results output :session object-types
    Object.keys(myObject);
    Object.values(myObject);
    #+END_SRC

    #+REVEAL: split

    Get:
    #+BEGIN_SRC js :exports results :results output :session object-types
    myObject.a;
    myObject[1];
    myObject[null];
    #+END_SRC

    #+REVEAL: split

    Set:
    #+BEGIN_SRC js :exports results :results output :session object-types
    myObject.b = 3;
    myObject[true] = 4;
    myObject[undefined] = 5;
    #+END_SRC

    #+BEGIN_SRC js :exports results :results output :session object-types
    Object.keys(myObject);
    Object.values(myObject);
    #+END_SRC

    #+BEGIN_SRC js :exports results :results output :session object-types
    myObject["b"];
    myObject[true];
    myObject[undefined];
    #+END_SRC

    #+REVEAL: split

    Keys are cast to Strings:
    #+BEGIN_SRC js :exports results :results output :session object-types
    myObject[{toto: 1}] = 5;
    myObject[[1,2,3]] = 6;
    #+END_SRC

    #+BEGIN_SRC js :exports results :results output :session object-types
    Object.keys(myObject);
    Object.values(myObject);
    #+END_SRC

    #+BEGIN_SRC js :exports results :results output :session object-types
    myObject[{toto: 42}];
    myObject[[1,2,3]];
    #+END_SRC

    #+BEGIN_NOTES
    - you can add keys after creation
    - keys are always cast to strings - so you better know your casts if you're writting this shit
    - seriously, don't do this
    #+END_NOTES
*** Getting/Setting
    TODO: ["prop"] .prop, dynamique
    impact on performances
*** Deleting
    TODO: delete, = undefined
    impact on performances
*** Methods
    TODO: invoke, consequences on this
*** Object Equality

** ES6: destructuring
** ES6: properties shortcut
** ES7: spread
   TODO: introduce objects merge with spread
   talk about immutability ?
